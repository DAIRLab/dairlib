# -*- mode: python -*-
# vi: set ft=python :

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "urdfs",
    data = glob([
        "urdf/**",
    ]),
)

cc_library(
    name = "franka_hardware",
    deps = [],
)

cc_binary(
    name = "franka_sim",
    srcs = ["franka_sim.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_sim_params",
        ":franka_lcm_channels",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//common",
        "//systems/framework:lcm_driven_loop",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_osc_controller",
    srcs = ["franka_osc_controller.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_osc_controller_params",
        ":franka_lcm_channels",
        "//common",
        "//examples/franka/systems:franka_systems",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/trajectory_optimization:lcm_trajectory_systems",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_c3_controller",
    srcs = ["franka_c3_controller.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_c3_controller_params",
        ":franka_lcm_channels",
        "//common",
        "//examples/franka/systems:franka_systems",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers:c3_controller",
        "//systems/controllers",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_visualizer",
    srcs = ["franka_visualizer.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_sim_params",
        ":franka_lcm_channels",
        "//common",
        "//multibody:utils",
        "//multibody:visualization_utils",
        "//systems:robot_lcm_systems",
        "//systems/trajectory_optimization:lcm_trajectory_systems",
        "//systems:system_utils",
        "//systems/primitives",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_ros_lcm_bridge",
    srcs = ["franka_ros_lcm_bridge.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_sim_params",
        ":franka_lcm_channels",
        "//common",
        "//systems:robot_lcm_systems",
        "//systems/ros:ros_pubsub_systems",
        "//systems/ros:franka_ros_channels",
        "//systems/ros:franka_ros_lcm_conversions",
        "//systems:system_utils",
        "//systems/primitives",
        "@drake//:drake_shared_library",
        "@ros",
        "@gflags",
    ],
    tags = ["ros"],
)

cc_binary(
    name = "franka_lcm_ros_bridge",
    srcs = ["franka_lcm_ros_bridge.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_sim_params",
        ":franka_lcm_channels",
        "//common",
        "//systems:robot_lcm_systems",
        "//systems/ros:ros_pubsub_systems",
        "//systems/ros:franka_ros_channels",
        "//systems/ros:franka_ros_lcm_conversions",
        "//systems/framework:lcm_driven_loop",
        "//systems:system_utils",
        "@drake//:drake_shared_library",
        "@ros",
        "@gflags",
    ],
    tags = ["ros"],
)

cc_library(
    name = "franka_lcm_channels",
    hdrs = ["parameters/franka_lcm_channels.h"],
    deps = [
        "@drake//:drake_shared_library",
    ],
    data = [
        "parameters/lcm_channels_hardware.yaml",
        "parameters/lcm_channels_simulation.yaml",
    ]
)

cc_library(
    name = "franka_sim_params",
    hdrs = ["parameters/franka_sim_params.h"],
    deps = [
        "@drake//:drake_shared_library",
    ],
    data = [
        "parameters/franka_sim_params.yaml",
    ]
)

cc_library(
    name = "franka_osc_controller_params",
    hdrs = ["parameters/franka_osc_controller_params.h"],
    deps = [
        "@drake//:drake_shared_library",
    ],
    data = [
        "parameters/franka_osc_controller_params.yaml",
    ]
)

cc_library(
    name = "franka_c3_controller_params",
    hdrs = ["parameters/franka_c3_controller_params.h"],
    deps = [
        "//solvers:c3",
        "@drake//:drake_shared_library",
    ],
    data = [
        "parameters/franka_c3_controller_params.yaml",
        "parameters/franka_c3_options_floating.yaml",
        "parameters/franka_c3_options_translation.yaml",
        "parameters/franka_qp_options.yaml",
    ]
)
