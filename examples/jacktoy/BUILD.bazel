# -*- mode: python -*-
# vi: set ft=python :

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "urdfs",
    data = glob([
        "urdf/**",
    ]),
)

cc_library(
    name = "parameters",
    data = glob([
        "*yaml",
    ]),
)

cc_library(
    name = "franka_hardware",
    deps = [],
)

cc_binary(
    name = "full_diagram",
    srcs = ["full_diagram.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_c3_controller_params",
        "//systems/controllers:sampling_params",
        ":trajectory_params",
        ":franka_lcm_channels",
        ":franka_osc_controller_params",
        ":franka_sim_params",
        "//common",
        "//examples/jacktoy/systems:franka_systems",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/controllers:sampling_c3_controller",
        "//systems/controllers:lcs_factory_system",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "//systems/trajectory_optimization:c3_output_systems",
        "//systems/trajectory_optimization:lcm_trajectory_systems",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_sim",
    srcs = ["franka_sim.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_lcm_channels",
        ":franka_sim_params",
        "//common",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/framework:lcm_driven_loop",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_osc_controller",
    srcs = ["franka_osc_controller.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_lcm_channels",
        ":franka_osc_controller_params",
        "//common",
        "//examples/jacktoy/systems:franka_systems",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "//systems/trajectory_optimization:lcm_trajectory_systems",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_joint_osc_controller",
    srcs = ["franka_joint_osc_controller.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":parameters",
        ":franka_lcm_channels",
        ":franka_osc_controller_params",
        "//common",
        "//examples/jacktoy/systems:franka_systems",
        "//examples/jacktoy/systems:joint_trajectory_generator",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "//systems/primitives:radio_parser",
        "//systems/trajectory_optimization:lcm_trajectory_systems",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_c3_controller",
    srcs = ["franka_c3_controller.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_c3_controller_params",
        "//systems/controllers:sampling_params",
        ":franka_sim_params",
        ":trajectory_params",
        ":franka_lcm_channels",
        "//common",
        "//examples/jacktoy/systems:franka_systems",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/controllers:sampling_c3_controller",
        "//systems/controllers:lcs_factory_system",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "//systems/trajectory_optimization:c3_output_systems",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "single_state_franka_c3_controller",
    srcs = ["single_state_franka_c3_controller.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_c3_controller_params",
        "//systems/controllers:sampling_params",
        ":franka_sim_params",
        ":trajectory_params",
        ":franka_lcm_channels",
        "//common",
        "//examples/jacktoy/systems:franka_systems",
        "//lcm:lcm_trajectory_saver",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/controllers",
        "//systems/controllers:single_state_sampling_c3",
        "//systems/controllers:lcs_factory_system",
        "//systems/controllers/osc:operational_space_control",
        "//systems/framework:lcm_driven_loop",
        "//systems/trajectory_optimization:c3_output_systems",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_visualizer",
    srcs = ["franka_visualizer.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":franka_lcm_channels",
        ":franka_sim_params",
        ":franka_c3_controller_params",
        "//systems/controllers:sampling_params",
        "//common",
        "//multibody:utils",
        "//multibody:visualization_utils",
        "//examples/jacktoy/systems:franka_systems",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/primitives",
        "//systems/trajectory_optimization:lcm_trajectory_systems",
        "//systems/visualization:lcm_visualization_systems",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_bridge_driver_out",
    srcs = ["franka_bridge_driver_out.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":parameters",
        ":franka_drake_lcm_driver_channels",
        ":franka_lcm_channels",
        ":franka_sim_params",
        "//common",
        "//examples/jacktoy/systems:franka_state_translator",
        "//multibody:utils",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/framework:lcm_driven_loop",
        "//systems/primitives",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_bridge_driver_in",
    srcs = ["franka_bridge_driver_in.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    deps = [
        ":parameters",
        ":franka_drake_lcm_driver_channels",
        ":franka_lcm_channels",
        ":franka_sim_params",
        "//common",
        "//examples/jacktoy/systems:franka_state_translator",
        "//multibody:utils",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/framework:lcm_driven_loop",
        "//systems/primitives",
        "@drake//:drake_shared_library",
        "@gflags",
    ],
)

cc_binary(
    name = "franka_ros_lcm_bridge",
    srcs = ["franka_ros_lcm_bridge.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    tags = ["ros"],
    deps = [
        ":franka_lcm_channels",
        ":franka_sim_params",
        "//common",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/primitives",
        "//systems/ros:franka_ros_channels",
        "//systems/ros:franka_ros_lcm_conversions",
        "//systems/ros:ros_pubsub_systems",
        "@drake//:drake_shared_library",
        "@gflags",
        "@ros",
    ],
)

cc_binary(
    name = "franka_lcm_ros_bridge",
    srcs = ["franka_lcm_ros_bridge.cc"],
    data = [
        ":urdfs",
        "@drake//manipulation/models/franka_description:models",
    ],
    tags = ["ros"],
    deps = [
        ":franka_lcm_channels",
        ":franka_sim_params",
        "//common",
        "//systems:robot_lcm_systems",
        "//systems:system_utils",
        "//systems/framework:lcm_driven_loop",
        "//systems/ros:franka_ros_channels",
        "//systems/ros:franka_ros_lcm_conversions",
        "//systems/ros:ros_pubsub_systems",
        "@drake//:drake_shared_library",
        "@gflags",
        "@ros",
    ],
)

cc_library(
    name = "franka_lcm_channels",
    hdrs = ["parameters/franka_lcm_channels.h"],
    data = [
        "parameters/lcm_channels_hardware.yaml",
        "parameters/lcm_channels_simulation.yaml",
    ],
    deps = [
        "//systems/framework:vector",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "franka_sim_params",
    hdrs = ["parameters/franka_sim_params.h"],
    data = [
        "parameters/franka_sim_params.yaml",
    ],
    deps = [
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "franka_osc_controller_params",
    hdrs = ["parameters/franka_osc_controller_params.h"],
    data = [
        "parameters/franka_osc_controller_params.yaml",
    ],
    deps = [
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "franka_c3_controller_params",
    hdrs = ["parameters/franka_c3_controller_params.h"],
    data = [
        "parameters/franka_c3_controller_params.yaml",
        "parameters/franka_c3_options_floating.yaml",
        "parameters/franka_c3_options_floating_safe.yaml",
        "parameters/sampling_params.yaml",
        "parameters/sampling_params_safe.yaml",
        "parameters/franka_qp_options.yaml",
    ],
    deps = [
        "//solvers:c3",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "trajectory_params",
    hdrs = ["parameters/trajectory_params.h"],
    data = [
        "parameters/trajectory_params.yaml",
    ],
    deps = [
        "//solvers:c3",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "franka_drake_lcm_driver_channels",
    hdrs = ["parameters/franka_drake_lcm_driver_channels.h"],
    data = [
        "parameters/franka_drake_lcm_driver_channels.yaml",
    ],
    deps = [
        "//solvers:c3",
        "@drake//:drake_shared_library",
    ],
)