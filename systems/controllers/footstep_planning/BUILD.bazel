load("@drake//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "alip_mpfc_s2s_system",
    srcs = ["alip_mpfc_s2s_system.cc"],
    hdrs = ["alip_mpfc_s2s_system.h"],
    deps = [
        ":alip_s2s_mpfc",
        "//lcm:lcm_trajectory_saver",
        "//systems/framework:vector",
        "@drake//:drake_shared_library",
        "@grid_map//grid_map_core",
    ],
)

cc_library(
    name = "alip_one_step_footstep_controller",
    srcs = ["alip_one_step_footstep_controller.cc"],
    hdrs = ["alip_one_step_footstep_controller.h"],
    deps = [
        ":alip_utils",
        "//common:eigen_utils",
        "//geometry:convex_polygon_set",
        "//lcm:lcm_trajectory_saver",
        "//lcmtypes:lcmt_robot",
        "//systems/filters:s2s_kalman_filter",
        "//systems/framework:vector",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "alip_mpc_output_reciever",
    srcs = ["alip_mpc_output_reciever.cc"],
    hdrs = ["alip_mpc_output_reciever.h"],
    deps = [
        "//lcmtypes:lcmt_robot",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "cf_mpfc",
    hdrs = ["cf_mpfc.h"],
    srcs = ["cf_mpfc.cc"],
    deps = [
        ":alip_utils",
        ":cf_mpfc_utils",
        "//common:eigen_utils",
        "//geometry:convex_polygon_set",
        "//solvers:constraints",
        "//solvers:optimization_utils",
        "//solvers:solver_options_io",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "alip_s2s_mpfc",
    srcs = ["alip_s2s_mpfc.cc"],
    hdrs = [
        "alip_s2s_mpfc.h",
        "alip_s2s_mpfc_params.h",
    ],
    deps = [
        ":alip_utils",
        "//common:eigen_utils",
        "//geometry:convex_polygon_set",
        "//solvers:constraints",
        "//solvers:optimization_utils",
        "//solvers:solver_options_io",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "cf_mpfc_utils",
    srcs = ["cf_mpfc_utils.cc"],
    hdrs = ["cf_mpfc_utils.h"],
    deps = [
        ":alip_utils",
        "//common:eigen_utils",
        "//multibody:utils",
        "//solvers:nonlinear_constraint",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "alip_utils",
    srcs = ["alip_utils.cc"],
    hdrs = ["alip_utils.h"],
    deps = [
        "//multibody:utils",
        "//solvers:nonlinear_constraint",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "alip_state_calculator_system",
    srcs = ["alip_state_calculator_system.cc"],
    hdrs = ["alip_state_calculator_system.h"],
    deps = [
        ":alip_utils",
        "//systems/framework:vector",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "flat_terrain_foothold_source",
    srcs = ["flat_terrain_foothold_source.cc"],
    hdrs = ["flat_terrain_foothold_source.h"],
    deps = [
        ":alip_utils",
        "//geometry:convex_polygon_set",
        "//systems/framework:vector",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "alip_mpc_interface_system",
    srcs = ["alip_mpc_interface_system.cc"],
    hdrs = ["alip_mpc_interface_system.h"],
    deps = [
        ":swing_foot_trajectory_generator",
        "//systems/controllers:alip_com_trajectory_generator",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "swing_foot_traj_solver",
    srcs = ["swing_foot_traj_solver.cc"],
    hdrs = ["swing_foot_traj_solver.h"],
    deps = [
        "//common:eigen_utils",
        "//solvers:fcc_qp_solver",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "swing_foot_trajectory_generator",
    srcs = ["swing_foot_trajectory_generator.cc"],
    hdrs = ["swing_foot_trajectory_generator.h"],
    deps = [
        ":alip_utils",
        ":swing_foot_traj_solver",
        "//common:polynomial_utils",
        "//multibody:utils",
        "//systems/controllers:minimum_snap_trajectory_generation",
        "//systems/framework:vector",
        "//systems/primitives",
        "@drake//:drake_shared_library",
    ],
)

cc_library(
    name = "footstep_lcm_systems",
    srcs = ["footstep_lcm_systems.cc"],
    hdrs = ["footstep_lcm_systems.h"],
    deps = [
        "//lcmtypes:lcmt_robot",
        "//systems/framework:vector",
        "@drake//:drake_shared_library",
    ],
)
